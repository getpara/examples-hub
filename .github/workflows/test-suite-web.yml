name: Test Suite - Web

on:
  pull_request:
    branches: [main]
    paths:
      - 'web/**'
      - '.github/workflows/test-suite-web.yml'
      - 'scripts/ci/**'
      - 'package.json'
      - 'yarn.lock'
      - 'tsconfig.json'
  
  push:
    branches: [main]
    paths:
      - 'web/**'
      - '.github/workflows/test-suite-web.yml'
      - 'scripts/ci/**'
      - 'package.json'
      - 'yarn.lock'
      - 'tsconfig.json'
  
  workflow_dispatch:
    inputs:
      skip_build:
        description: 'Skip build step (faster iteration)'
        type: boolean
        default: false
      skip_e2e:
        description: 'Skip E2E tests'
        type: boolean
        default: false

concurrency:
  group: test-suite-web-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20.19.0"
  FOLDER: "web"

jobs:
  # Collect all projects in web folder
  collect-projects:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.collect.outputs.projects }}
      e2e-matrix: ${{ steps.collect.outputs.e2e-matrix }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Collect projects
        id: collect
        run: |
          # Find all projects with package.json in web folder
          projects="["
          first=true
          
          for framework_dir in web/*; do
            if [ -d "$framework_dir" ]; then
              framework_name=$(basename "$framework_dir")
              
              # Check if framework dir itself has package.json (single project)
              if [ -f "$framework_dir/package.json" ]; then
                if [ "$first" != "true" ]; then projects+=","; fi
                projects+="{\"path\":\"$framework_dir\",\"name\":\"$framework_name\"}"
                first=false
              else
                # Check subdirectories for multiple projects
                for project_dir in $framework_dir/*; do
                  if [ -d "$project_dir" ] && [ -f "$project_dir/package.json" ]; then
                    project_name=$(basename "$project_dir")
                    if [ "$first" != "true" ]; then projects+=","; fi
                    projects+="{\"path\":\"$project_dir\",\"name\":\"$framework_name/$project_name\"}"
                    first=false
                  fi
                done
              fi
            fi
          done
          
          projects+="]"
          echo "projects=$projects" >> $GITHUB_OUTPUT
          
          # E2E matrix (framework level only)
          e2e_matrix='[{"framework":"react-vite","name":"React Vite"},{"framework":"react-nextjs","name":"React Next.js"},{"framework":"vue","name":"Vue"},{"framework":"svelte","name":"Svelte"}]'
          echo "e2e-matrix=$e2e_matrix" >> $GITHUB_OUTPUT
          
          # Debug output
          echo "Found projects:"
          echo "$projects" | jq .

  # Lint all projects
  lint:
    needs: collect-projects
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJson(needs.collect-projects.outputs.projects) }}
    
    name: Lint ${{ matrix.project.name }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install yarn
        run: npm install -g yarn

      - name: Load CI environment variables
        run: |
          if [ -f .env.ci ]; then
            cat .env.ci >> $GITHUB_ENV
          fi

      - name: Run lint
        run: |
          cd ${{ matrix.project.path }}
          yarn install --frozen-lockfile
          
          if grep -q '"lint"' package.json; then
            echo "Running lint..."
            yarn lint
          else
            echo "No lint script found, skipping..."
          fi

  # Type check all projects
  typecheck:
    needs: collect-projects
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJson(needs.collect-projects.outputs.projects) }}
    
    name: Type Check ${{ matrix.project.name }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install yarn
        run: npm install -g yarn

      - name: Load CI environment variables
        run: |
          if [ -f .env.ci ]; then
            cat .env.ci >> $GITHUB_ENV
          fi

      - name: Run typecheck
        run: |
          cd ${{ matrix.project.path }}
          yarn install --frozen-lockfile
          
          if grep -q '"typecheck"' package.json; then
            echo "Running typecheck..."
            yarn typecheck
          else
            echo "No typecheck script found, skipping..."
          fi

  # Build all projects
  build:
    needs: [collect-projects, lint, typecheck]
    if: github.event.inputs.skip_build != 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJson(needs.collect-projects.outputs.projects) }}
    
    name: Build ${{ matrix.project.name }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install yarn
        run: npm install -g yarn

      - name: Load CI environment variables
        run: |
          if [ -f .env.ci ]; then
            cat .env.ci >> $GITHUB_ENV
          fi

      - name: Build project
        run: |
          chmod +x scripts/ci/build-projects.sh
          ./scripts/ci/build-projects.sh "${{ matrix.project.path }}" yarn build

  # E2E tests
  e2e:
    needs: [collect-projects, lint, typecheck]
    if: github.event.inputs.skip_e2e != 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        framework: ${{ fromJson(needs.collect-projects.outputs.e2e-matrix) }}
    
    name: E2E ${{ matrix.framework.name }}
    
    env:
      PARA_API_KEY_BETA: ${{ secrets.PARA_API_KEY_BETA }}
      PARA_API_KEY_SANDBOX: ${{ secrets.PARA_API_KEY_SANDBOX }}
      PARA_ENVIRONMENT: BETA
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install yarn
        run: npm install -g yarn

      - name: Load CI environment variables
        run: |
          if [ -f .env.ci ]; then
            cat .env.ci >> $GITHUB_ENV
          fi

      - name: Install dependencies
        run: yarn install

      - name: Install Playwright
        run: npx playwright install chromium

      - name: Run E2E Tests
        run: |
          if [ "${{ matrix.framework.framework }}" = "react-nextjs" ]; then
            xvfb-run yarn test:react-nextjs
          else
            xvfb-run yarn test:${{ matrix.framework.framework }}
          fi

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report-${{ matrix.framework.framework }}
          path: playwright-report/
          retention-days: 7

  # Summary job
  summary:
    if: always()
    needs: [lint, typecheck, build, e2e]
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        run: |
          echo "## CI Summary for Web"
          echo "| Check | Status |"
          echo "|-------|--------|"
          echo "| Lint | ${{ needs.lint.result }} |"
          echo "| Type Check | ${{ needs.typecheck.result }} |"
          echo "| Build | ${{ needs.build.result }} |"
          echo "| E2E | ${{ needs.e2e.result }} |"
          
          if [ "${{ needs.lint.result }}" = "success" ] && \
             [ "${{ needs.typecheck.result }}" = "success" ] && \
             [ "${{ needs.build.result }}" = "success" ] && \
             [ "${{ needs.e2e.result }}" = "success" ]; then
            echo ""
            echo "✅ All checks passed!"
          else
            echo ""
            echo "❌ Some checks failed"
            exit 1
          fi