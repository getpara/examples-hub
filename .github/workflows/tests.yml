name: Tests

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  # Node.js settings
  NODE_OPTIONS: "--max-old-space-size=4096"
  CI: true
  NODE_ENV: "production"
  
  # Framework telemetry/feature flags
  NEXT_TELEMETRY_DISABLED: 1
  BUILD_CONCURRENCY: 4
  DISABLE_ESLINT_PLUGIN: true
  GENERATE_SOURCEMAP: false
  
  # Yarn settings to avoid network issues
  YARN_NETWORK_TIMEOUT: 300000
  YARN_NETWORK_CONCURRENCY: 1
  YARN_REGISTRY: "https://registry.npmjs.org/"
  npm_config_registry: "https://registry.npmjs.org/"
  
  # API keys (placeholders for CI)
  PARA_API_KEY: test-build-key
  VITE_PARA_API_KEY: test-build-key-vite
  NEXT_PUBLIC_PARA_API_KEY: test-build-key-next
  ENCRYPTION_KEY: test-encryption-key
  NEXT_PUBLIC_WALLET_CONNECT_PROJECT_ID: test-wc-id
  
  # Web3/blockchain configs
  REACT_APP_NETWORK: "testnet"
  NEXT_PUBLIC_NETWORK: "testnet"
  VITE_NETWORK: "testnet"
  NEXT_PUBLIC_INFURA_ID: "test-infura-id"
  REACT_APP_INFURA_ID: "test-infura-id"
  VITE_INFURA_ID: "test-infura-id"
  NEXT_PUBLIC_ALCHEMY_KEY: "test-alchemy-key"
  REACT_APP_ALCHEMY_KEY: "test-alchemy-key"
  VITE_ALCHEMY_KEY: "test-alchemy-key"
  
  # EVM chain settings
  NEXT_PUBLIC_DEFAULT_CHAIN: "sepolia"
  REACT_APP_DEFAULT_CHAIN: "sepolia"
  VITE_DEFAULT_CHAIN: "sepolia"
  
  # Auth providers
  NEXT_PUBLIC_AUTH_PROVIDERS: "email,wallet"
  VITE_AUTH_PROVIDERS: "email,wallet"
  REACT_APP_AUTH_PROVIDERS: "email,wallet"
  
  # Solana configs
  NEXT_PUBLIC_SOLANA_NETWORK: "devnet"
  REACT_APP_SOLANA_NETWORK: "devnet"
  VITE_SOLANA_NETWORK: "devnet"
  NEXT_PUBLIC_SOLANA_RPC_URL: "https://api.devnet.solana.com"
  REACT_APP_SOLANA_RPC_URL: "https://api.devnet.solana.com"
  VITE_SOLANA_RPC_URL: "https://api.devnet.solana.com"
  
  # Cosmos configs
  NEXT_PUBLIC_COSMOS_CHAIN_ID: "theta-testnet-001"
  REACT_APP_COSMOS_CHAIN_ID: "theta-testnet-001"
  VITE_COSMOS_CHAIN_ID: "theta-testnet-001"
  
  # IPFS/Arweave settings
  NEXT_PUBLIC_IPFS_GATEWAY: "https://ipfs.io/ipfs/"
  REACT_APP_IPFS_GATEWAY: "https://ipfs.io/ipfs/"
  VITE_IPFS_GATEWAY: "https://ipfs.io/ipfs/"

jobs:
  # Job for React Next.js projects
  build-web-react-nextjs:
    runs-on: ubuntu-latest
    env:
      PROJECT_DIR: "web/with-react-nextjs"
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
        continue-on-error: true
      - name: Install jq
        run: |
          which jq || (apt-get update && apt-get install -y jq) || (apk update && apk add --no-cache jq) || echo "Failed to install jq, but continuing as it might already be available"
      - name: Build projects
        run: |
          # Find all projects in the specified directory
          PROJECTS=()
          
          for DIR in "$PROJECT_DIR"/*; do
            if [ -d "$DIR" ] && [ -f "$DIR/package.json" ]; then
              PROJECTS+=("$DIR")
            fi
          done
          
          echo "Found $(echo ${#PROJECTS[@]}) projects to build:"
          printf "  - %s\n" "${PROJECTS[@]}"
          
          # Create tracking files
          touch success_projects.txt
          touch failed_projects.txt
          
          # Build each project sequentially
          for PROJECT in "${PROJECTS[@]}"; do
            echo ""
            echo "========================================================"
            echo "Building $PROJECT"
            echo "========================================================"
                        
            # Ensure node_modules/.bin is in the PATH
            export PATH="$PWD/node_modules/.bin:$PATH"
            
            # Install and build
            if cd "$GITHUB_WORKSPACE/$PROJECT" && yarn install && yarn build; then
              echo "✅ Successfully built $PROJECT"
              echo "$PROJECT" >> $GITHUB_WORKSPACE/success_projects.txt
            else
              echo "❌ Failed to build $PROJECT"
              echo "$PROJECT" >> $GITHUB_WORKSPACE/failed_projects.txt
            fi
            
            cd "$GITHUB_WORKSPACE"
          done
          
          # Summary
          SUCCESSFUL=$(cat success_projects.txt | wc -l)
          FAILED=$(cat failed_projects.txt | wc -l)
          
          echo ""
          echo "========================================================"
          echo "Build Summary for $PROJECT_DIR"
          echo "========================================================"
          echo "Total projects: ${#PROJECTS[@]}"
          echo "Successful: $SUCCESSFUL"
          echo "Failed: $FAILED"
          
          if [ "$FAILED" -gt 0 ]; then
            echo "Failed projects:"
            cat failed_projects.txt | sed 's/^/  - /'
            if [ "$FAILED" -eq "${#PROJECTS[@]}" ]; then
              exit 1
            fi
          fi

  # Job for React Vite projects
  build-web-react-vite:
    runs-on: ubuntu-latest
    env:
      PROJECT_DIR: "web/with-react-vite"
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
        continue-on-error: true
      - name: Install jq
        run: |
          which jq || (apt-get update && apt-get install -y jq) || (apk update && apk add --no-cache jq) || echo "Failed to install jq, but continuing as it might already be available"
      - name: Build projects
        run: |
          # Find all projects in the specified directory
          PROJECTS=()
          
          for DIR in "$PROJECT_DIR"/*; do
            if [ -d "$DIR" ] && [ -f "$DIR/package.json" ]; then
              PROJECTS+=("$DIR")
            fi
          done
          
          echo "Found $(echo ${#PROJECTS[@]}) projects to build:"
          printf "  - %s\n" "${PROJECTS[@]}"
          
          # Create tracking files
          touch success_projects.txt
          touch failed_projects.txt
          
          # Build each project sequentially
          for PROJECT in "${PROJECTS[@]}"; do
            echo ""
            echo "========================================================"
            echo "Building $PROJECT"
            echo "========================================================"
            
            # Ensure node_modules/.bin is in the PATH
            export PATH="$PWD/node_modules/.bin:$PATH"
            
            # Install and build
            if cd "$GITHUB_WORKSPACE/$PROJECT" && yarn install && yarn build; then
              echo "✅ Successfully built $PROJECT"
              echo "$PROJECT" >> $GITHUB_WORKSPACE/success_projects.txt
            else
              echo "❌ Failed to build $PROJECT"
              echo "$PROJECT" >> $GITHUB_WORKSPACE/failed_projects.txt
            fi
            
            cd "$GITHUB_WORKSPACE"
          done
          
          # Summary
          SUCCESSFUL=$(cat success_projects.txt | wc -l)
          FAILED=$(cat failed_projects.txt | wc -l)
          
          echo ""
          echo "========================================================"
          echo "Build Summary for $PROJECT_DIR"
          echo "========================================================"
          echo "Total projects: ${#PROJECTS[@]}"
          echo "Successful: $SUCCESSFUL"
          echo "Failed: $FAILED"
          
          if [ "$FAILED" -gt 0 ]; then
            echo "Failed projects:"
            cat failed_projects.txt | sed 's/^/  - /'
            if [ "$FAILED" -eq "${#PROJECTS[@]}" ]; then
              exit 1
            fi
          fi

  # Job for Vue Vite projects
  build-web-vue-vite:
    runs-on: ubuntu-latest
    env:
      PROJECT_DIR: "web/with-vue-vite"
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
        continue-on-error: true
      - name: Install jq
        run: |
          which jq || (apt-get update && apt-get install -y jq) || (apk update && apk add --no-cache jq) || echo "Failed to install jq, but continuing as it might already be available"
      - name: Build projects
        run: |
          # Find all projects in the specified directory
          PROJECTS=()
          
          for DIR in "$PROJECT_DIR"/*; do
            if [ -d "$DIR" ] && [ -f "$DIR/package.json" ]; then
              PROJECTS+=("$DIR")
            fi
          done
          
          echo "Found $(echo ${#PROJECTS[@]}) projects to build:"
          printf "  - %s\n" "${PROJECTS[@]}"
          
          # Create tracking files
          touch success_projects.txt
          touch failed_projects.txt
          
          # Build each project sequentially
          for PROJECT in "${PROJECTS[@]}"; do
            echo ""
            echo "========================================================"
            echo "Building $PROJECT"
            echo "========================================================"
                        
            # Ensure node_modules/.bin is in the PATH
            export PATH="$PWD/node_modules/.bin:$PATH"
            
            # Install and build
            if cd "$GITHUB_WORKSPACE/$PROJECT" && yarn install && yarn build; then
              echo "✅ Successfully built $PROJECT"
              echo "$PROJECT" >> $GITHUB_WORKSPACE/success_projects.txt
            else
              echo "❌ Failed to build $PROJECT"
              echo "$PROJECT" >> $GITHUB_WORKSPACE/failed_projects.txt
            fi
            
            cd "$GITHUB_WORKSPACE"
          done
          
          # Summary
          SUCCESSFUL=$(cat success_projects.txt | wc -l)
          FAILED=$(cat failed_projects.txt | wc -l)
          
          echo ""
          echo "========================================================"
          echo "Build Summary for $PROJECT_DIR"
          echo "========================================================"
          echo "Total projects: ${#PROJECTS[@]}"
          echo "Successful: $SUCCESSFUL"
          echo "Failed: $FAILED"
          
          if [ "$FAILED" -gt 0 ]; then
            echo "Failed projects:"
            cat failed_projects.txt | sed 's/^/  - /'
            if [ "$FAILED" -eq "${#PROJECTS[@]}" ]; then
              exit 1
            fi
          fi

  # Job for Svelte Vite projects
  build-web-svelte-vite:
    runs-on: ubuntu-latest
    env:
      PROJECT_DIR: "web/with-svelte-vite"
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
        continue-on-error: true
      - name: Install jq
        run: |
          which jq || (apt-get update && apt-get install -y jq) || (apk update && apk add --no-cache jq) || echo "Failed to install jq, but continuing as it might already be available"
      - name: Build projects
        run: |
          # Find all projects in the specified directory
          PROJECTS=()
          
          for DIR in "$PROJECT_DIR"/*; do
            if [ -d "$DIR" ] && [ -f "$DIR/package.json" ]; then
              PROJECTS+=("$DIR")
            fi
          done
          
          echo "Found $(echo ${#PROJECTS[@]}) projects to build:"
          printf "  - %s\n" "${PROJECTS[@]}"
          
          # Create tracking files
          touch success_projects.txt
          touch failed_projects.txt
          
          # Build each project sequentially
          for PROJECT in "${PROJECTS[@]}"; do
            echo ""
            echo "========================================================"
            echo "Building $PROJECT"
            echo "========================================================"
            
            
            
            # Ensure node_modules/.bin is in the PATH
            export PATH="$PWD/node_modules/.bin:$PATH"
            
            # Install and build
            if cd "$GITHUB_WORKSPACE/$PROJECT" && yarn install && yarn build; then
              echo "✅ Successfully built $PROJECT"
              echo "$PROJECT" >> $GITHUB_WORKSPACE/success_projects.txt
            else
              echo "❌ Failed to build $PROJECT"
              echo "$PROJECT" >> $GITHUB_WORKSPACE/failed_projects.txt
            fi
            
            cd "$GITHUB_WORKSPACE"
          done
          
          # Summary
          SUCCESSFUL=$(cat success_projects.txt | wc -l)
          FAILED=$(cat failed_projects.txt | wc -l)
          
          echo ""
          echo "========================================================"
          echo "Build Summary for $PROJECT_DIR"
          echo "========================================================"
          echo "Total projects: ${#PROJECTS[@]}"
          echo "Successful: $SUCCESSFUL"
          echo "Failed: $FAILED"
          
          if [ "$FAILED" -gt 0 ]; then
            echo "Failed projects:"
            cat failed_projects.txt | sed 's/^/  - /'
            if [ "$FAILED" -eq "${#PROJECTS[@]}" ]; then
              exit 1
            fi
          fi

  # build-mobile-projects:
  # ... existing code ...
